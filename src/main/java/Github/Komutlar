
                                             KOMUTLAR

  git --version :--> bilgisayarımızda versiyonun kayıtlı olup olmadıgına bakar (git mevcut mu diye)
                :--> ilk olarak bunun kontrolunu yaparim


  git configuration :--> Yapılan commitleri burada belirtilen isim ve e posta ile iliskilendirir.
                         Repoda calısan diger kisiler bu isim ve e postayı görür, sadece kimlik tanımlamak icin olusturulmustur.
                         Bunun amacı yapılan degisikligi kimin yaptıgını görebilmemiz örneğin;
                         git config --global user.name "Ali Gel"
                         git config --global user.email "ali@gel.com"


   gt config --global -l :--> Bu komutta GitHub'a kayıtlı oldugum user name, user email gibi bilgilerim çıkar
                              Bu bilgilerimi degistirmemde asagıdaki gibi mümkündür
                              git config --global user.mail "istediğim email adresini girerim" enter
                              git config --global user.name "istediğim ismi girerim" enter
                              git --version enter
                              git config --global -l enter
                              yenilediğim email ve user name cıkar


  cd "proje adresini kopyala" enter :--> bu projemizi gite dahil eder
                                     C:\users\kübra\OneDri\proje1(en sonda açtıgım klasörümün ismi yazmalı)
                                     cd=(change directory):dizini degistir

  git init --> Bu komuttan once "git show" yapalım gorecegizki herhangi bir repomuz olusmamıs
               Lokal bilgisayarimizda bir projeyi versiyon sistemine alabilmek icin bu komut kullanilir
               Her projede en basta bir kere kullanılır.
               Bu komut kullanilinca proje klasorunde gizli dosyalardaki ".git" klasoru otomatik olusturulur
               "initialized empty Git repository in" yazısını görürüz yani bize şunu ifade eder
               "bos bir git repository açıldı" der. Bu durum daha klasörümde yapmıs oldugum herhangi bir
                degisikligimin henüz repo'ma eklenmedigini gösterir(yani şu an working space'teyiz)
               ".git" ile bir isimiz yoktur sadece klasorumuzun icine aliriz
               sonrasinda versiyonlama isine geceriz
               Bu lokal repomuzu saklayacaktir Git ile iliski kurmamizi saglar



  git add . --> Dosyaları staging area ya gönderir.
                Commitlemeden once yaptigim staging areaya ekleme islemidir


  git add dosya_adı --> sadece eklemek istediğim dosyayı alırım



  git commit -m"commit ismi" --> Commit:işlemek demektir. Versiyon olusturur
                                 Islemi kalici hale getirmis oluruz
                                 Git'e eklediğimiz dosyaları kalıcı olarak Git veri tabanına isler



  git commit --amend -m"yeni isim" --> Burda isim degisikligini rahatlıkla yapabilirim
                                       Versiyonumun ismini degistirmek istedigimde bu komutu kullanirim



  git commit -am "versiyon metni"  --> Hem dosyamı eklerim, hem de versiyon olustururum(kısayol)
  (git add + git commit -m "..."       Steaging area'ya ugramadan direkt dosyamızı göndermis oluruz




  git status/git diff              >>>>>Working space ve Staging Area'da kulllanilir
             git diff --staged

  git show/git log                 >>>>>Commit store'de kullanilir
           git log --oneline



  git status --> Bana genel durum aşamasını verir. Son durumu ve olası yapılması gerekenleri bize gösterir
                 "Working Space" veya "Staging Area"nın durumunu görmek için kullanılır.
                 "commit" yaptıktan sonra "git status" degil "git log" kullaniriz
                 mesela biz proje1
                 klasörümüzde "git status" yaptıgımızda "resim ve metin" dosyalarımızı kırmızı görürüz
                 Burada demek ki bize bu dosyaların henüz working space asamasında oldugunu gösterir
                 dolayısıyla bunları "git add" yapıp Staging Area'ya sonra "commit" yapıp Commit Store'ye
                 eklenmesini ister.(burda direkt git commit -am "" de kullanabiliriz) sürekli komutları
                 kullandıgımda "git status" yapabilirim durumumu görebilirim.
                             dosyalarımızın kırmızı görünümü: Working Space
                             dosyalarımızın yeşil görünümü: Staging Area



  git diff --> Henuz "commit" edilmemis dosyalarımı bana gosterir
               Commitledigim versiyonumun uzerinde de yeni bir degisiklik yaptıgımda tekrardan
               ne yaptıgımı görebilmek icin kullandıgım komuttur
               Versiyon haline gelmemis dosyalarimda yapilan degisiklikleri gosterir



  git diff --staged --> Staging Area'daki degisikliklerimin durumunu gosterir
                        Burasi bos oldugunda bir sey gostermez



  git log --> "commit" edildikten sonraki "genel durumu" bana gösterir
              Olusturulan versiyonları ve üzerinde yaptıgımız degişiklikleri görmek için bu komut kullanılır
              Burada olusturmus oldugum versiyonumu görüyorum (v1)
              Kim yapmış, hangi satte yapmış, hangi tarihte yapmış,kaç defa değişiklik
              yapmıs bunları verir bana



  git log --oneline ==> Tüm versiyonlarımı listeler düzenler tek satırda verir
                        HEAD -> master: en sonki hazirlamis oldugum versiyonumu verir
                        git commit -am"yeni ekledigim dosya" dedikten sonra
                        git log --oneline enter dersem yeni versiyonumuda eklemis olurum
                        git show [versiyon hash code] ile yapılan degisiklikleri görmüs olacagım.



  git show --> Commit edilmis dosyalarimi bana gosterir
               Versiyon haline getirdigim dosyalarimda yapilan degisiklikleri gorurum
               git show [hash kodun ilk 7 karakteri] bu şekilde komut yazarız
               Versiyonlarımızda ne tür degisiklikler yapılmıs onu gösterir




  ÖNEMLİİİİİ --> Dosyanin ismini silmiyor dosyada yaptigim islemlerimi siliyor

  git restore --> Tek bir dosyayı siler
  git restore . --> Working space'deki tüm dosyalarimda yapmis oldugum degisiklikleri siler


  git restore --staged --> Tek bir dosyayi siler
  git restore --staged . --> Stage Area'da ki tüm dosyalarda yepmis oldugum degisiklikleri siler
                         --> Stage Area bosalir Working Spaceye geri donulur

  git reset --hard --> Working Space + Stage Area
                       Buradaki mevcut olan bütün dosyalardaki degisiklikleri siler



  git checkout [hash code] .  --> Onceki versiyonu incelemek icin kullandigim komuttur
                              --> Burda versiyonlar arasi gecis yapabilirim inceleyebilirim
                              --> Sonra dosyami kalici hale getirebilirim
                              --> Uzerinden gecmis oldugum versiyonlarimi duzeltebilir kalici hale getirebilirim
                              --> (kalici hale getirmek = commitlemek)


  git reset --hard [hashcode] --> Geri alinamayacak sekilde onceki versiyona geri doner
                              --> olusturdugumuz dort versiyondan en ilkine bu komutu kullanarak gidersek
                              sondaki diger uc versiyonumuzu kalici olarak silecektir


  git branch [isim] --> Yeni branch olusturur

  git branch --> Mevcut branchleri listeler

  git branch -m [isim] --> Branch ismini degistirir

  git checkout [isim] --> Branch aktif hale gelir (yesil yanar) :gecmek istedigim branche bu komutla gecerim

  git merge [isim] --> İki branchi birlestirir, birlestirdigi branch daima masterdan bir onceki branchdir

  git branch -d [isim] --> Branchi siler




  git stash --> working space ve staging areadaki degisiklikleri gecici olarak hafizaya alir ve bu bolgeleri temizler
            --> Bir yerde farketmedigimiz herhangi bir degisikligi gormek acisindan faydalidir

  git stash list --> Hafizaya alinan degisiklikleri gormek icin kullanilir

  git stash pop --> Hafizaya aldigim degisiklikleri geri getirmek icin kullanirim
                --> Geri getirdikten sonra ister commitlerim ister silerim


           *************************************************************************

    ANA KOMUTLAR ----->  git init                         :repo olusturur, projede en basta bir kere kullanilir

                         gitt add .                       :dosyaları staging area'ya gonderir

                         git commit -m "versiyon metni"   :versiyon olusturur

                         git commit -am "versiyon metni"  :
                         (git add + git commit -m "...")


    YARDIMCI KOMUTLAR --> git status : genel durum ile ilgili bilgi verir

                          git log    :versiyonların listesini verir

                          git show   :versiyondaki degisiklikleri gösterir

                          git diff   :

