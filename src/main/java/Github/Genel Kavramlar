
                  GENEL KAVRAMLAR

  Dosyalarimda herhangi bir eksiltme, düzeltme,ekleme yaparsam bunlari oncelikle  git add . ve
  git commit -m"" yaparak versiyon haline getirmeliyim.

  Master : ANADAL


  Branch : DAL
       -->branch dal manasına gelir; herkes kendi bolumunde calisir sonra master'de birlestirir
       -->ornegin agac ve dal gibi dusunebiliriz agac-->master, dal-->branch
       -->Orginal kodlarin guvenligi saglanir
       -->Her developer kendi bolumunden sorumlu our
       -->Daha hızlı gelistirme yapilir



  git show, git log, git diff, git status -->bu komutları her defasında kullanmamıza gerek yoktur,dilersek
                                            bakariz  yardimci komutlarimizdir


  Version: surum demektir,surumleme islemini Git ve GitHub'a yapacagız



  Repository:depolama--> versiyon kontrol ve birlikte calisma altyapisini ayri tutmak istediğimiz her bir
                         bağimsiz yapiya repository denir. Genellikle her proje için  ayri bir repository
                         tanimlanir eger benim repo'm yoksa "git init" komutuyla bana repo acacak



  cd : change directory --> dizini degistir demek
                       --> ulasilmak istenilen dizin icin kullanilir
                       --> cd "proje adresi" enter
                       --> klasörde actigimiz proje adresine "cmd" yazip direk terminalde "cd"nin yanina
                       bosluktan sonra enter yaparsak proje dizinini cekmis oluruz veya klasör bicimindeki
                       projeyi direkt fare ile "cd"nin yanindaki bosluktan sürükler birakiriz

  Working Space:(calisma alani)-->.git klasörünün bulundugu calisma alanidir.
                                Klasörler ve dosyalar üzerinden degisiklik burada yapilir
                                Henüz daha klasörümde yaptigim degisiklikleri repo'ma göndermedigim durumdur
                                (masaustunde actigimiz klasorun icinde olusturdugumuz ".git, metin dosyasi"
                                 kismi buradakileri staging area'ya alirim burasi bos kalir


  Staging Area:(sahne alani)--> Versiyon olusturacak olan dosya veye klasörlerin gecici olarak toplandigi yerdir.
                              Versiyon(commit) olusturulduktan sonra otomatik olarak staging area
                              bosaltilir. Bir sorun bir cakisma var mi diye bakilir kontrol edilir.
                              "working space" ile "commit store"nin arafi sayilir

  Commit Store:(taahhüt deposu)--> Git her bir commit'i ayrı bir versiyon olarak tutar. Böylece yapilan
                                  cesitli degisikliklerden sonra projede sorunlar ortaya cikarsa bir önceki commite
                                  geri dönülebilir

  Asagidaki gibi lokal versiyonlar olusturabiliriz

  WORKİNG SPACE --> git add dosya_adı: dersem sadece o dosyada yaptigim herhangi bir şeyi gönderir
                    git add . : dersem tamamini gönderir
                    Staging Area kismina geçiş yapmiş olurum

  STAGİNG AREA --> git commit -m "commit ismi
                   git commit -amend -m "yeni isim"
                   Commit Store kismina geçmiş olurum

  COMMİT STORE --> işleme yaptigimiz yerdir


  HEAD Master--> Bir repo icinde birden fazla commit olabilir. Bunlardan en son alinan commit'e HEAD denir
                 Bu head degistirildiginde önceki versiyonlara dönüs yapilabilir

  **********************************************

  ornek verecek olusak mesela hava limanina gideriz
  working space --> bilet aldim ve biletimi verdim
                   valizimi teslim ettim
  spaging area --> bekleme alanina gectim (dolayisiyla working space bosalmis oldu)
  commit store --> ve ucuyorum :))
